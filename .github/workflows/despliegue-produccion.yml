name: Despliegue a produccion - Nuevo Proyecto

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Instalar dependencias backend
        working-directory: Backend
        run: npm install
        

      - name: Ejecutar pruebas Backend
        working-directory: Backend
        run: npm test
        

      - name: Instalar dependencias frontend
        working-directory: Frontend
        run: npm install
        

      - name: Ejecutar pruebas frontend
        working-directory: Frontend 
        run: npm test
        

  deploy:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Instalar dependencias (OpenVPN, SSH y sshpass)
        run: |
          sudo apt update -qq > /dev/null 2>&1
          sudo apt install -y -qq openvpn openvpn-systemd-resolved openssh-client sshpass

      - name: Crear archivo de configuración OpenVPN
        run: echo "${{ secrets.OPENVPN_CONFIG }}" > /dev/shm/face-ubb.ovpn

      - name: Conexion a la VPN de la UBB
        uses: kota65535/github-openvpn-connect-action@v3.1.0
        timeout-minutes: 2
        continue-on-error: false
        with:
          config_file: /dev/shm/face-ubb.ovpn
          username: ${{ secrets.OPENVPN_USERNAME }}
          password: ${{ secrets.OPENVPN_PASSWORD }}

      - name: Eliminar archivo de configuración OpenVPN
        if: always()
        run: rm -f /dev/shm/face-ubb.ovpn

      - name: Conexión SSH y Despliegue nuevo proyecto
        timeout-minutes: 5
        run: |
            sshpass -p "${{ secrets.PROD_PASSWORD }}" ssh \
             -q \
             -o StrictHostKeyChecking=no \
             -p ${{ secrets.PROD_PORT }} \
              ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} << 'EOF'
                set -euo pipefail
                cd GPS-Deploy/GPS/

                echo "Actualizando código fuente..."
                git fetch origin main
                git reset --hard origin/main

                echo "Instalando dependencias BACKEND..."
                cd Backend
                npm ci

                echo "Verificando y reiniciando pm2 BACKEND..."
                pm2 status Backend-app || pm2 start npm --name Backend-app -- run start
                pm2 restart Backend-app

                echo "Instalando dependencias FRONTEND..."
                cd ../Frontend
                npm ci

                echo "Verificando y reiniciando pm2 FRONTEND..."
                pm2 status frontend-app || pm2 start npm --name frontend-app -- run start
                pm2 restart frontend-app
            EOF